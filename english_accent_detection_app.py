# -*- coding: utf-8 -*-
"""English_accent_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11jPgWdHVqPMoL3pscHBH1EHuwjufoEcQ

Parsing the video Link and downloading it
"""

import streamlit as st
from moviepy import VideoFileClip   
import os
import requests
import tempfile

def download_video_from_url(url):
    """
    Downloads a video from the given URL and saves it to a temporary file.
    Returns the path to the saved file.
    """
    try:
        response = requests.get(url, stream=True)
        if response.status_code == 200:
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
            with open(temp_file.name, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            return temp_file.name
        else:
            st.error("Failed to download video from the URL.")
            return None
    except Exception as e:
        st.error(f"Error downloading video: {e}")
        return None

def extract_audio(video_path):
    """
    Extracts audio from the video and saves it as a WAV file.
    Returns the path to the audio file.
    """
    try:
        video = VideoFileClip(video_path)
        if video.audio is None:
            st.error("No audio found in the video.")
            return None

        audio_path = tempfile.NamedTemporaryFile(delete=False, suffix=".wav").name
        video.audio.write_audiofile(audio_path, fps=16000, codec='pcm_s16le')
        return audio_path
    except Exception as e:
        st.error(f"Error extracting audio: {e}")
        return None

#Load model and predict accent
# -----------------------
@st.cache_resource
def load_accent_model():
    classifier = foreign_class(
        source="Jzuluaga/accent-id-commonaccent_xlsr-en-english",
        pymodule_file="custom_interface.py",
        classname="CustomEncoderWav2vec2Classifier"
    )
    return classifier

def analyze_accent(audio_path):
    classifier = load_accent_model()
    out_prob, score, index, label = classifier.classify_file(audio_path)
    score *= 100  # Return score as percentage
    
    return label, score

# Streamlit UI
st.title("üéôÔ∏è English Accent Audio Detector")

option = st.radio("Choose input method:", ["Upload video file", "Enter direct MP4 URL"])

video_path = None

if option == "Upload video file":
    uploaded_video = st.file_uploader("Upload your video", type=["mp4", "mov", "avi"])
    if uploaded_video is not None:
        temp_video_path = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
        with open(temp_video_path.name, "wb") as f:
            f.write(uploaded_video.read())
        video_path = temp_video_path.name
        st.success("Video uploaded successfully.")

elif option == "Enter direct MP4 URL":
    video_url = st.text_input("Enter direct video URL (e.g., MP4 link)")
    if st.button("Download Video"):
        video_path = download_video_from_url(video_url)
        if video_path:
            st.success("Video downloaded successfully.")

# Audio extraction
if video_path:
    if st.button("Extract Audio"):
        audio_path = extract_audio(video_path)
        if audio_path:
            st.audio(audio_path, format='audio/wav')
            st.success("Audio extracted and ready for analysis!")

             # Analyze the audio
            st.info("Analyzing accent...")
            accent, confidence = analyze_accent(audio_path)  # get the predicted accent and confidence score from the model
            

            # Show top prediction and score
            import streamlit as st
import tempfile
import moviepy.editor as mp
import os
import torchaudio
from speechbrain.pretrained.interfaces import foreign_class

# Load SpeechBrain model
@st.cache_resource
def load_accent_model():
    classifier = foreign_class(
        source="Jzuluaga/accent-id-commonaccent_xlsr-en-english",
        pymodule_file="custom_interface.py",
        classname="CustomEncoderWav2vec2Classifier"
    )
    return classifier

# Extract audio from video URL
def extract_audio_from_video(video_path):
    video = mp.VideoFileClip(video_path)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp_audio:
        audio_path = tmp_audio.name
        video.audio.write_audiofile(audio_path, codec='pcm_s16le')
    return audio_path

# Classify accent
def classify_accent(audio_path, classifier):
    out_prob, score, index, label = classifier.classify_file(audio_path)
    return label, score * 100  # Return score as percentage

# Streamlit App
st.title("üéôÔ∏è English Accent Classifier with Fluency & Transcription")

video_url = st.text_input("Enter public video URL (MP4 or Loom link):")

if video_url:
    with st.spinner("Downloading and processing video..."):
        # Download video file
        video_path = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4").name
        video_content = requests.get(video_url)
        with open(video_path, 'wb') as f:
            f.write(video_content.content)

        # Extract audio
        audio_path = extract_audio_from_video(video_path)

        # Load model and classify
        classifier = load_accent_model()
        accent, confidence = classify_accent(audio_path, classifier)

        # Display results
        st.subheader("üéß Accent Detection Result")
        st.write(f"The speaker in the video has a **{accent}** accent.")
        st.write(f"**Confidence Score:** {confidence:.2f}%")

        # Summary
        if confidence > 85:
            st.success("‚úÖ The model is highly confident in this prediction.")
        elif confidence > 60:
            st.info("‚ÑπÔ∏è The model is reasonably confident, but there may be overlap with other accents.")
        else:
            st.warning("‚ö†Ô∏è The model has low confidence in this result. Consider using a clearer audio sample.")

            
